{"version":3,"sources":["components/feedback/Notification.js","components/feedback/statistics.js","components/feedback/FeedbackOptions.js","components/feedback/Section.js","components/feedback/feedback.js","App.js","index.js","components/feedback/Feedback.module.css"],"names":["Notification","Statistics","good","neutral","bad","total","percentage","className","styles","list","FeedbackOptions","options","onLeaveFeedback","map","option","idx","button","type","name","onClick","prototype","PropTypes","array","isRequired","func","Section","title","children","string","Feedback","useState","setGood","setNeutral","setBad","setTotal","positivePercentage","setpositivePercentage","useEffect","Math","round","e","target","prevState","App","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"kNAIeA,EAHM,WACnB,OAAO,iD,gBCkBMC,EAhBI,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,KAAMC,EAAsC,EAAtCA,QAASC,EAA6B,EAA7BA,IAAKC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAC/C,OAAOD,EAAQ,EACb,qCACE,qBAAIE,UAAWC,IAAOC,KAAtB,UACE,uCAAUP,KACV,0CAAaC,KACb,sCAASC,QAEX,uCAAUC,KACV,sDAAyBC,EAAzB,UAGF,cAAC,EAAD,K,gBCEEI,EAAkB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,mCACGD,EAAQE,KAAI,SAACC,EAAQC,GAAT,OACX,wBACER,UAAWC,IAAOQ,OAClBC,KAAK,SACLC,KAAMJ,EAENK,QAASP,EALX,SAOGE,GAHIA,SASEJ,IACfA,EAAgBU,UAAY,CAC1BT,QAASU,IAAUC,MAAMC,WACzBX,gBAAiBS,IAAUG,KAAKD,YCnClC,IAAME,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,oCACE,6BAAKD,IACJC,MAGUF,IACfA,EAAQL,UAAY,CAClBM,MAAOL,IAAUO,OAAOL,YCJ1B,IAkFeM,EAlFE,WACf,MAAwBC,mBAAS,GAAjC,mBAAO5B,EAAP,KAAa6B,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAO3B,EAAP,KAAgB6B,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAO1B,EAAP,KAAY6B,EAAZ,KACA,EAA0BH,mBAAS,GAAnC,mBAAOzB,EAAP,KAAc6B,EAAd,KACA,EAAoDJ,mBAAS,GAA7D,mBAAOK,EAAP,KAA2BC,EAA3B,KAEAC,qBAAU,WACRH,EAAShC,EAAOE,EAAMD,GACtBiC,EAAsBE,KAAKC,MAAOrC,EAAOG,EAAS,QACjD,CAACH,EAAMC,EAASC,EAAKC,IAmBxB,OACE,qCACE,cAAC,EAAD,CAASqB,MAAM,wBAAf,SACE,cAAC,EAAD,CACEf,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAtBY,SAAC4B,GAEnB,OADiBA,EAAEC,OAAXvB,MAEN,IAAK,OACHa,GAAQ,SAACW,GAAD,OAAeA,EAAY,KACnC,MACF,IAAK,UACHV,GAAW,SAACU,GAAD,OAAeA,EAAY,KACtC,MACF,IAAK,MACHT,GAAO,SAACS,GAAD,OAAeA,EAAY,KAClC,MACF,QACE,aAiBF,cAAC,EAAD,CAAShB,MAAM,aAAf,SACE,cAAC,EAAD,CACExB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,WAAY6B,UC/CPQ,EAJH,WACV,OAAO,cAAC,EAAD,KCETC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCT1BC,EAAOC,QAAU,CAAC,OAAS,yBAAyB,KAAO,uBAAuB,QAAU,6B","file":"static/js/main.3ee162d6.chunk.js","sourcesContent":["import React from \"react\";\nconst Notification = () => {\n  return <p>No feedback yet</p>;\n};\nexport default Notification;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Notification from \"./Notification\";\nimport styles from \"./Feedback.module.css\";\nconst Statistics = ({ good, neutral, bad, total, percentage }) => {\n  return total > 0 ? (\n    <>\n      <ul className={styles.list}>\n        <li>Good:{good}</li>\n        <li>Neutral:{neutral}</li>\n        <li>Bad:{bad}</li>\n      </ul>\n      <p>Total:{total}</p>\n      <p>Positive percentage: {percentage}%</p>\n    </>\n  ) : (\n    <Notification />\n  );\n};\n\nexport default Statistics;\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  percentage: PropTypes.number.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./Feedback.module.css\";\n\n// const FeedbackOptions = ({ onGood, onNeutral, onBad }) => (\n//   <>\n//     <button className={styles.button} type=\"button\" onClick={onGood}>\n//       Good\n//     </button>\n//     <button className={styles.button} type=\"button\" onClick={onNeutral}>\n//       Neutral\n//     </button>\n//     <button className={styles.button} type=\"button\" onClick={onBad}>\n//       Bad\n//     </button>\n//   </>\n// );\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\n  <>\n    {options.map((option, idx) => (\n      <button\n        className={styles.button}\n        type=\"button\"\n        name={option}\n        key={option}\n        onClick={onLeaveFeedback}\n      >\n        {option}\n      </button>\n    ))}\n  </>\n);\n\nexport default FeedbackOptions;\nFeedbackOptions.prototype = {\n  options: PropTypes.array.isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\nconst Section = ({ title, children }) => (\n  <section>\n    <h2>{title}</h2>\n    {children}\n  </section>\n);\nexport default Section;\nSection.prototype = {\n  title: PropTypes.string.isRequired,\n};\n","import React from \"react\";\nimport { useState, useEffect } from \"react\";\n\nimport Statistics from \"./statistics\";\nimport FeedbackOptions from \"./FeedbackOptions\";\nimport Section from \"./Section\";\nconst Feedback = () => {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const [total, setTotal] = useState(0);\n  const [positivePercentage, setpositivePercentage] = useState(0);\n\n  useEffect(() => {\n    setTotal(good + bad + neutral);\n    setpositivePercentage(Math.round((good / total) * 100));\n  }, [good, neutral, bad, total]);\n\n  const addFeedback = (e) => {\n    const { name } = e.target;\n    switch (name) {\n      case \"good\":\n        setGood((prevState) => prevState + 1);\n        break;\n      case \"neutral\":\n        setNeutral((prevState) => prevState + 1);\n        break;\n      case \"bad\":\n        setBad((prevState) => prevState + 1);\n        break;\n      default:\n        return;\n    }\n  };\n\n  return (\n    <>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={[\"good\", \"neutral\", \"bad\"]}\n          onLeaveFeedback={addFeedback}\n        ></FeedbackOptions>\n        {/* <FeedbackOptions\n            onGood={this.addGoodFeedback}\n            onNeutral={this.addNeutralFeedback}\n            onBad={this.addBadFeedback}\n          /> */}\n      </Section>\n      <Section title=\"Statistics\">\n        <Statistics\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={total}\n          percentage={positivePercentage}\n        />\n      </Section>\n    </>\n  );\n};\n\n//  const  addFeedback = (option) => {\n//     setState((prevState) => {\n//       return {...prevState, [option]: prevState[option] + 1 };\n//     });\n//   };\n//\n\n// class Feedback extends React.Component {\n\n// addGoodFeedback = () => {\n//   this.setState((prevState) => {\n//     return { good: prevState.good + 1 };\n//   });\n// };\n// addNeutralFeedback = () => {\n//   this.setState((prevState) => {\n//     return { neutral: prevState.neutral + 1 };\n//   });\n// };\n// addBadFeedback = () => {\n//   this.setState((prevState) => {\n//     return { bad: prevState.bad + 1 };\n//   });\n// };\n\n// }\n\nexport default Feedback;\n","import React from \"react\";\nimport Feedback from \"./components/feedback/feedback\";\n\nconst App = () => {\n  return <Feedback />;\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Feedback_button__3VOvU\",\"list\":\"Feedback_list___NQ6i\",\"section\":\"Feedback_section__2ECZO\"};"],"sourceRoot":""}